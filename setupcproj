#!/bin/bash

# check project name
if [ -z "$1" ]; then
    echo "SYNOPSIS: $0 project_name [modules...]"
    exit -1
fi

PRJ_NAME="$1"
PRJ_DIR="./$PRJ_NAME"

shift 1

# check if project already exists
if [ ! -d "$PRJ_DIR" ]; then
    # creating project directory structure
    mkdir -p "$PRJ_DIR"/{src,include,bin,obj,tests,lib}

    # creating main.c file
    cat > "$PRJ_DIR/src/main.c" <<EOL
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char *argv[]) {


    return 0;
}
EOL

    # creating Makefile
    cat > "$PRJ_DIR/Makefile" <<EOL
CC=gcc
DB=gdb

CFLAGS=-Wall -Wextra -Iinclude
DEBUG_FLAGS=-g\$(DB) -DDEBUG -fsanitize=address
RELEASE_FLAGS=-O2 -s -DNDEBUG

SRC_DIR=src
OBJ_DIR=obj
BIN_DIR=bin
INCLUDE_DIR=include

SRCS=\$(wildcard \$(SRC_DIR)/*.c)
OBJS=\$(patsubst \$(SRC_DIR)/%.c, \$(OBJ_DIR)/%.o, \$(SRCS))

BIN=\$(BIN_DIR)/$PRJ_NAME

all: debug

\$(OBJ_DIR)/%.o: \$(SRC_DIR)/%.c
	\$(CC) \$(CFLAGS) -c \$< -o \$@

debug: CFLAGS+=\$(DEBUG_FLAGS)
debug: \$(BIN)

release: CFLAGS+=\$(RELEASE_FLAGS)
release: clean
release: \$(BIN)

\$(BIN): \$(OBJS)
	\$(CC) \$(CFLAGS) \$^ -o \$@

clean:
	rm -rf \$(OBJ_DIR)/* \$(BIN_DIR)/*
EOL

    echo "Project '$PRJ_NAME' successfully created!"
fi

# creating modules
if [ "$#" -eq 0 ]; then
    exit 0
fi

for module in "$@"; do
    if [ -f "$PRJ_DIR/include/$module.h" ]; then
        echo "Warning: Module '$module' already exists!"
        continue
    fi

    cat > "$PRJ_DIR/include/$module.h" << EOL
#ifndef __${module^^}_H__
#define __${module^^}_H__

#ifdef __cplusplus
extern "C" {
#endif



#ifdef __cplusplus
}
#endif

#endif //__${module^^}_H__
EOL

    cat > "$PRJ_DIR/src/$module.c" << EOL
#include <$module.h>


EOL

    echo "#include <$module.h>" | cat - "$PRJ_DIR/src/main.c" > temp && mv temp "$PRJ_DIR/src/main.c"

    echo "Module '$module' added to $PRJ_NAME!"
done
