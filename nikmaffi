#!/bin/bash

NKM_CONFIG="${HOME}/.nikmaffi_conf"

# Checking config file
if [ ! -f "${NKM_CONFIG}" ]; then
	echo "Please create the configuration file: ${NKM_CONFIG}"

	echo -e "\nConfiguration file format:
username                       (local and remote)
remote host                    (hostname or ip address)
ssh port                       (22 for default)
local directory to backup      (with '/' at the end)
remote target backup directory (with '/' at the end)
local mount point directory
remote directory to mount"

	exit 1
fi

# Reading config file
IFS= read -r NKM_USERNAME < ${NKM_CONFIG}
NKM_HOME="/home/${NKM_USERNAME}"
IFS= read -r NKM_REMOTE_HOST < <(sed -n '2p' ${NKM_CONFIG})
IFS= read -r NKM_SSH_PORT < <(sed -n '3p' ${NKM_CONFIG})
IFS= read -r NKM_LOCAL_BK_DIR < <(sed -n '4p' ${NKM_CONFIG})
IFS= read -r NKM_REMOTE_BK_DIR < <(sed -n '5p' ${NKM_CONFIG})
IFS= read -r NKM_LOCAL_MOUNT < <(sed -n '6p' ${NKM_CONFIG})
IFS= read -r NKM_REMOTE_MOUNT < <(sed -n '7p' ${NKM_CONFIG})

# Checking number of parameters
if [ $# -lt 1 ]; then
	echo "Usage: $0 {${NKM_REMOTE_HOST}|update} ..."
    exit 1
fi

# Checking remote computer actions
if [[ "$1" == "${NKM_REMOTE_HOST}" ]]; then
	if [ $# -lt 2 ]; then
		echo "Usage: $0 $1 {connect|mount|umount|backup-view|backup}"
		exit 1
	fi

	# Switch on second arg
	case "$2" in
		connect)
			echo "Connecting to ${NKM_REMOTE_HOST}..."
			ssh -p "${NKM_SSH_PORT}" "${NKM_USERNAME}"@"${NKM_REMOTE_HOST}"
			;;
		mount)
			echo "Mounting ${NKM_REMOTE_MOUNT} directory..."
			sshfs "${NKM_USERNAME}"@"${NKM_REMOTE_HOST}":"${NKM_REMOTE_MOUNT}" "${NKM_LOCAL_MOUNT}" -p "${NKM_SSH_PORT}"
			;;
		umount)
			echo "Unmounting ${NKM_LOCAL_MOUNT} directory..."
			umount "${NKM_LOCAL_MOUNT}"
			;;
		backup-view)
			echo "Making backup (dry run)..."
			rsync -van --delete --exclude 'env/' -e "ssh -p ${NKM_SSH_PORT}" "${NKM_LOCAL_BK_DIR}" "${NKM_USERNAME}"@"${NKM_REMOTE_HOST}":"${NKM_REMOTE_BK_DIR}"
			;;
		backup)
			echo "Making backup..."
			rsync -va --delete --exclude 'env/' -e "ssh -p ${NKM_SSH_PORT}" "${NKM_LOCAL_BK_DIR}" "${NKM_USERNAME}"@"${NKM_REMOTE_HOST}":"${NKM_REMOTE_BK_DIR}"
			;;
		*)
			exit 1
			;;
	esac
fi

# Checking system update action
if [[ "$1" == "update" ]]; then
	# Updating the system
	if command -v pacman &> /dev/null; then
		# Arch-based
		sudo pacman -Syu

		# Updating AUR packages
		if command -v yay &> /dev/null; then
			yay -Syu
		fi
	elif command -v apt &> /dev/null; then
		# Debian-based
		sudo apt update
		sudo apt full-upgrade -y
	fi

	# Updating anaconda
	if command -v conda &> /dev/null; then
		conda update -n base --all
		conda update -n appdev --all
		conda update -n appdev python
	fi

	# Updating flatpak
	if command -v flatpak &> /dev/null; then
		flatpak update
	fi
fi
